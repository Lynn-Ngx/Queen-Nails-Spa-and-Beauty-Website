{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/app/app.js","public/app/routes.js","public/app/views/controller/contactController.js","public/app/views/controller/mainController.js","public/app/views/directives/footer/footer.directive.js","public/app/views/directives/images/toggle/toggle.js","public/app/views/directives/navbar/navbar.js","public/app/views/directives/sidebar/sidebar.directive.js","public/app/views/directives/typewriter/typewriter.directive.js","public/app/views/pages/home/homeController.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","require('angular');\nrequire('angular-route');\nrequire('angular-animate');\n\nrequire('./routes.js');\nrequire('./views/controller/contactController.js');\nrequire('./views/controller/mainController.js');\nrequire('./views/pages/home/homeController.js');\n\n//\nrequire('./views/directives/navbar/navbar.js');\nrequire('./views/directives/images/toggle/toggle.js');\nrequire('./views/directives/typewriter/typewriter.directive.js');\nrequire('./views/directives/footer/footer.directive.js');\n\nrequire('./views/directives/sidebar/sidebar.directive.js');\n\nangular.module('roomApp', ['routes', 'contactController', 'mainController', 'homeController', 'app.directives.navbar', 'app.directives.toggle', 'app.directives.typewriter', 'app.directives.sidebar', 'app.directives.customFooter'])\n\n","var app = angular.module('routes', ['ngRoute'])\n\n    .config(function ($routeProvider, $locationProvider) {\n\n        $routeProvider\n            .when('/', {\n                templateUrl: 'app/views/pages/home/home.html',\n                controller: 'homeCtrl',\n                controllerAs: 'home'\n            })\n            .when('/staff', {\n                templateUrl: 'app/views/pages/staff/staff.html'\n            })\n            .when('/services', {\n                templateUrl: 'app/views/pages/services/services.html'\n            })\n\n            .when('/contact', {\n                templateUrl: 'app/views/pages/contact/contact.html',\n                controller: 'contactCtrl',\n                controllerAs: 'contact'\n            })\n            .otherwise({redirectTo: '/'});\n\n        $locationProvider.html5Mode({\n            enabled: true,\n            requiredBase: false\n        });\n    });\n","angular.module('contactController', [])\n\n    .controller('contactCtrl', function($http, $location, $timeout, $rootScope){\n\n        const app = this;\n\n    });","angular.module('mainController', [])\n\n.controller('mainCtrl', function($rootScope, $scope, $location, $timeout, $http){\n\n    const app = this;\n\n    //      $rootScope.$on('$routeChangeStart', () => {\n    //\n    //      });\n\n\n    const test = () => {\n        console.log('test')\n    }\n\n    app.sendMail = (data) => {\n        console.log('mail', data)\n\n        $http.post('api/sendMail', data).then((data) => {\n\n            document.getElementById('emailNotSent').style.display = 'none'\n            document.getElementById('emailSent').style.display = 'block'\n\n\n\n        });\n\n    }\n\n    app.myMap = () => {\n        console.log('clicked')\n        var mapOptions = {\n            center: new google.maps.LatLng(51.5, -0.12),\n            zoom: 10,\n            mapTypeId: google.maps.MapTypeId.HYBRID\n        }\n        var map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n    }\n\n    $rootScope.safeApply = function() {\n        if(!$rootScope.$$phase) $rootScope.$apply();\n    };\n});","/**\n * @numberOfFields needs to be updated as per amount of fields in less file\n * @mediaMaxWidth in less file should match the maxWidth in the directive controller\n */\n\nangular.module('app.directives.customFooter', [])\n    .directive('customFooter', function() {\n        return {\n            restrict: 'EA',\n            scope: {\n\n            },\n            templateUrl:  \"/app/views/directives/footer/footer.template.html\",\n            controller: function($scope, $rootScope){\n\n\n            }\n        }\n    });","angular.module('app.directives.toggle', [])\n    .directive('toggle', function() {\n        return {\n            restrict: 'EA',\n            scope: {\n                svgHeight: '@',\n                svgWidth: '@',\n                svgFill: '@'\n\n            },\n            templateUrl:  \"/app/views/directives/images/toggle/toggle.html\",\n            controller: function($scope){\n\n                console.log($scope)\n\n            }\n        }\n    });","/**\n * @numberOfFields needs to be updated as per amount of fields in less file\n * @mediaMaxWidth in less file should match the maxWidth in the directive controller\n */\n\nangular.module('app.directives.navbar', [])\n    .directive('navbar', function() {\n        return {\n            restrict: 'EA',\n            scope: {\n\n            },\n            templateUrl:  \"/app/views/directives/navbar/navbar.html\",\n            controller: function($scope, $rootScope){\n                let wrapperHasBeenHidden = false\n                const maxWdith = 700\n\n                $scope.fields = [\n                    {\n                        name: 'Home',\n                        href: '/'\n                    },\n                    {\n                        name: 'Prices',\n                        href: '/services'\n                    },\n                    {\n                        name: 'Gallery',\n                        href: '/staff'\n                    },\n                    {\n                        name: 'Contact Us',\n                        href: '/contact'\n                    }\n                ]\n\n\n                //get array of names of fields\n                const fields = ['Contact', 'Services', 'Location', 'Staff']\n                const url = window.location.href.split(\"/\")\n                const tempField =  url[url.length - 1].replace(/^\\w/, c => c.toUpperCase())\n                $scope.selectedField = (fields.includes(tempField)) ? tempField : 'Home'\n\n                const init = () => {\n                    const w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n\n                    if (w <= maxWdith && !wrapperHasBeenHidden){\n                        document.getElementById('navbarWrapper').classList.toggle('hidden')\n                        wrapperHasBeenHidden = true\n                    }\n                }\n\n\n                init()\n\n                window.onresize = () => {\n                    const w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n\n                    if (w <= maxWdith && !wrapperHasBeenHidden){\n                        document.getElementById('navbarWrapper').classList.toggle('hidden')\n                        wrapperHasBeenHidden = true\n                    }else if (w >= maxWdith && wrapperHasBeenHidden){\n                        wrapperHasBeenHidden = false\n                        document.getElementById('navbarWrapper').classList.remove('hidden')\n                        document.getElementById('navbarWrapper').classList.remove('un-hidden')\n                    }\n                }\n\n                $scope.fieldClicked = (fieldThatWsClicked) => {\n                    window.scrollTo(0,0)\n                    $scope.selectedField = fieldThatWsClicked\n                    const w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n\n                    if (w <= maxWdith){\n                        hideNavbar()\n\n                    }\n                }\n\n                $scope.toggleNavbar = () => {\n                    if (document.getElementById('navbarWrapper').classList.contains('hidden')) showNavbar()\n                    else hideNavbar()\n                }\n\n                const hideNavbar = () => {\n                    document.getElementById('navbarWrapper').classList.remove('un-hidden')\n                    document.getElementById('navbarWrapper').classList.add('hidden')\n                }\n\n                const showNavbar = () => {\n                    document.getElementById('navbarWrapper').classList.remove('hidden')\n                    document.getElementById('navbarWrapper').classList.add('un-hidden')\n                }\n\n\n\n                $scope.scrollPosition = 0\n                window.addEventListener('scroll', (value) => {\n                    $scope.scrollPosition = window.pageYOffset\n                    $rootScope.safeApply()\n                })\n\n            }\n        }\n    });","angular.module('app.directives.sidebar', [])\n    .directive('sidebar', function() {\n        return {\n            restrict: 'EA',\n            scope: {\n\n            },\n            templateUrl:  \"/app/views/directives/sidebar/sidebar.template.html\",\n            controller: function($scope){\n\n                console.log('asdasdasd')\n                const init = () => {\n\n                }\n\n\n                init()\n\n            }\n        }\n    });","angular.module('app.directives.typewriter', [])\n    .directive('typewriter', function() {\n        return {\n            restrict: 'EA',\n            scope: {\n\n            },\n            templateUrl:  \"/app/views/directives/typewriter/typewriter.template.html\",\n            controller: function($scope){\n\n                const wordsToTypeWrite = [\n                    'a manicure',\n                    'a pedicure',\n                    'some waxing'\n                ]\n\n                $scope.currentTypedWord = ''\n\n\n                const delay = (time) => {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve()\n                        }, time)\n                    })\n                }\n\n                const typeWriteWord = (word) => {\n                    return new Promise(resolve => {\n                        const lengthOfWord = word.length;\n                        let currentIndexOnWord = 0\n                        let incrementBy = 1\n\n                        const typewriting = setInterval(async () => {\n                            if (incrementBy === 1){\n                                if (currentIndexOnWord < lengthOfWord){\n                                    $scope.currentTypedWord += word[currentIndexOnWord]\n                                    currentIndexOnWord += incrementBy;\n                                }else {\n                                    incrementBy = -1\n                                    // await delay(1000)\n                                }\n\n                            }else {\n\n                                if (currentIndexOnWord > 0){\n                                    $scope.currentTypedWord = $scope.currentTypedWord.substring(0, $scope.currentTypedWord.length - 1)\n                                    currentIndexOnWord += incrementBy;\n                                }else {\n                                    clearInterval(typewriting)\n                                    resolve()\n                                }\n                            }\n\n                            $scope.$apply();\n\n\n                        }, 100)\n                    })\n                }\n\n                let indexOfCurrentWordTypewriting = 0;\n\n\n\n                const startTypescript = async() => {\n                    while(true){\n                        if (indexOfCurrentWordTypewriting === wordsToTypeWrite.length) {\n                            indexOfCurrentWordTypewriting = 0\n                        }\n\n                        await typeWriteWord(wordsToTypeWrite[indexOfCurrentWordTypewriting])\n                        indexOfCurrentWordTypewriting += 1\n                    }\n                }\n\n                startTypescript()\n\n\n\n            }\n        }\n    });","angular.module('homeController', [])\n\n    .controller('homeCtrl', function($rootScope, $scope, $location, $timeout, $http){\n\n    const app = this;\n\n\n    app.myMap = () => {\n        console.log('clicked')\n        var mapOptions = {\n            center: new google.maps.LatLng(53.2938549, -6.3557327),\n            zoom: 15,\n            mapTypeId: google.maps.MapTypeId.HYBRID\n        }\n        var map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n    }\n\n    app.myMap()\n\n    $rootScope.safeApply = function() {\n        if(!$rootScope.$$phase) $rootScope.$apply();\n    };\n});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}